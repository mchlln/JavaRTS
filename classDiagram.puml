@startuml

package "Model" <<Frame>> {
    interface Building {
        + getSize() : Size
        + getCost() : Integer
        + getConstructionTime() : ??
        + getInhabitants() : Set<People>
        + getWorkers() : Set<People>
        + getMaxInhabitants() : Integer
        + getMaxWorkers() : Integer
        + getNumberWorkers() : Integer
        + getNumberInhabitants() : Integer
    }
    abstract class BuildingDecorator implements Building{
        - ID : UUID
        - type : BuildingType
        - inhabitants : Set<People>
        - workers : Set<People>
        - constructionTime : ??
        - size : Size
    }
    note left of BuildingDecorator
        Design Pattern Decorator
    end note


    class WoodenCabin extends BuildingDecorator{

    }
    class House extends BuildingDecorator{
        
    }
    class AppartmentBuilding extends BuildingDecorator{
        
    }
    class Farm extends BuildingDecorator{
        
    }
    class Quarry extends BuildingDecorator{
        
    }
    class LumberMill extends BuildingDecorator{
        
    }
    class CementPlant extends BuildingDecorator{
        
    }
    class SteelMill extends BuildingDecorator{
        
    }
    class ToolFactory extends BuildingDecorator{
        
    }
    enum BuildingType{
        WOODENCABIN
        HOUSE
        APPARTMENTBUILDING
        FARM
        QUARRY
        LUMBERMILL
        CEMENTPLANT
        STEELMILL
        TOOLFACTORY
    }

    class People{
        - House : Building
        - Job : Building
        - FoodCost : Integer
    }
    class Map <<(S,#FF7700)Singleton>>{
        - size : Size
        - tiles : MapTileStatus[][]
    }

    enum MapTileStatus {
        FREE
        OCCUPIED
    }


    interface Resource {
        + getType() : RessourceType
        + getQuantity() : Integer
        + addResources(quantity : Integer)
        + removeResources(quantity : Integer)

    }
    abstract class ResourceDecorator implements Resource{
        - Type : RessourceType
        - Quantity : Integer
    }
    note right of ResourceDecorator
        Design Pattern Decorator
    end note

    interface Durability{
        + getDurability() : time??
    }
    class Food extends ResourceDecorator implements Durability{

    }
    class Wood extends ResourceDecorator{

    }
    class Stone extends ResourceDecorator{

    }
    class Coal extends ResourceDecorator{

    }
    class Iron extends ResourceDecorator{

    }
    class Steel extends ResourceDecorator{

    }
    class Cement extends ResourceDecorator{

    }
    class Lumber extends ResourceDecorator{

    }
    class Tools extends ResourceDecorator implements Durability{

    }
    enum ResourceType{
        FOOD
        WOOD
        STONE
        COAL
        IRON
        STEEL
        CEMENT
        LUMBER
        TOOLS
    }

    class GameManager <<(S,#FF7700)Singleton>> implements Subject{
        - buildings : Set<Building>
        - worldInhabitants : Set<People>
        - map : Map
        - resources : HashMap<ResourceType, Integer>
        - observers : Set<Observer>
        + addBuilding() : void
        + removeBuilding() : void
        + addInhabitantsInto() : void
        + removeInhabitantsFrom() : void
        + update() : void
    }
    note left of GameManager
        Design Pattern Singleton
        Design Pattern Composite
        Design Pattern Observer (Subject)
    end note

    exception NotEnoughSpace{}
    exception TooManyInhabitants{}
    exception NotEnoughResources{}


    class Size{
        - width : Integer
        - length : Integer
        + getSize() : [Integer, Integer]
        + getWidth() : Integer
        + getLength() : Integer
    }

    interface Subject{
        + addObserver(Observer) : void
        + removeObserver(Observer) : void
        + notifyAll() : void
    }

    ResourceType -->ResourceDecorator::Type
    BuildingType -->BuildingDecorator::Type
    Map --> GameManager::Map
    Size --> BuildingDecorator::size
    Size --> Map::size
    People --> GameManager::worldInhabitants
    People --> BuildingDecorator::inhabitants
    People --> BuildingDecorator::workers
    BuildingDecorator --> GameManager::buildings
    ResourceDecorator --> GameManager::resources
    MapTileStatus --> Map::tiles

}



@enduml
