@startuml

package "Model" <<Frame>> {

    package Building{
    interface Building {
        + getSize() : Size
        + getCost() : HashMap<Resource, Integer>
        + getConstructionTime() : ??
        + getInhabitants() : Set<People>
        + getWorkers() : Set<People>
        + getMaxInhabitants() : Integer
        + getMaxWorkers() : Integer
        + getNumberWorkers() : Integer
        + getNumberInhabitants() : Integer
        + getType() : BuildingType
        + getPosition() : Position
    }
    abstract class BuildingDecorator implements Building{
        - ID : UUID
        - inhabitants : Set<People>
        - workers : Set<People>
        + addInhabitants(int number) : boolean
        + add workers(int number) : boolean
    }
    note left of BuildingDecorator
        Design Pattern Decorator
    end note


    class WoodenCabin extends BuildingDecorator{

    }
    class House extends BuildingDecorator{
        
    }
    class AppartmentBuilding extends BuildingDecorator{
        
    }
    class Farm extends BuildingDecorator{
        
    }
    class Quarry extends BuildingDecorator{
        
    }
    class LumberMill extends BuildingDecorator{
        
    }
    class CementPlant extends BuildingDecorator{
        
    }
    class SteelMill extends BuildingDecorator{
        
    }
    class ToolFactory extends BuildingDecorator{
        
    }
    enum BuildingType{
        WOODENCABIN
        HOUSE
        APPARTMENTBUILDING
        FARM
        QUARRY
        LUMBERMILL
        CEMENTPLANT
        STEELMILL
        TOOLFACTORY
    }
    }
    

    class People{
        - House : Building
        - Job : Building
        - FoodCost : Integer
    }
    class Map <<(S,#FF7700)Singleton>>{
        - size : Size
        - tiles : MapTileStatus[][]
        + getTileStatus(Position) : MapTilestatus
    }

    enum MapTileStatus {
        FREE
        OCCUPIED
    }

    package Resource{
    interface Resource {
        + getType() : RessourceType
        + getQuantity() : Integer
        + addResources(quantity : Integer)
        + removeResources(quantity : Integer)

    }
    abstract class ResourceDecorator implements Resource{
        - Type : RessourceType
        - Quantity : Integer
    }
    note right of ResourceDecorator
        Design Pattern Decorator
    end note

    interface Durability{
        + getDurability() : time??
    }
    class Food extends ResourceDecorator implements Durability{

    }
    class Wood extends ResourceDecorator{

    }
    class Stone extends ResourceDecorator{

    }
    class Coal extends ResourceDecorator{

    }
    class Iron extends ResourceDecorator{

    }
    class Steel extends ResourceDecorator{

    }
    class Cement extends ResourceDecorator{

    }
    class Lumber extends ResourceDecorator{

    }
    class Tools extends ResourceDecorator implements Durability{

    }
    enum ResourceType{
        FOOD
        WOOD
        STONE
        COAL
        IRON
        STEEL
        CEMENT
        LUMBER
        TOOLS
    }

    class ResourceManager{
        - resources : HashMap<ResourceType,ResourceDecorator>
        + addResources(ResourceType type, Integer quantity)
        + removeResources(ResourceType type, Integer quantity)
    }
}

    class GameManager <<(S,#FF7700)Singleton>> implements Subject{
        - buildings : Set<Building>
        - worldInhabitants : Set<People>
        - map : Map
        - resources : ResourceManager
        - observers : Set<Observer>
        + addBuilding() : void
        + removeBuilding() : void
        + addInhabitantsInto() : void
        + removeInhabitantsFrom() : void
        + update() : void
    }
    note left of GameManager
        Design Pattern Singleton
        Design Pattern Composite
        Design Pattern Observer (Subject)
    end note

    class Size{
        - width : Integer
        - length : Integer
        + getSize() : [Integer, Integer]
        + getWidth() : Integer
        + getLength() : Integer
    }

    interface Subject{
        + addObserver(Observer) : void
        + removeObserver(Observer) : void
        + notifyAll() : void
    }
    class Position{
        - x : Integer
        - y : Integer
    }

}

package Exception <<Frame>>{
    exception NotEnoughSpace{}
    exception TooManyInhabitants{}
    exception NotEnoughResources{}
}

package View {}

package Controller {
    interface Command{
        + execute()
    }
    class AddBuilding implements Command{}
    class RemoveBuilding implements Command{}
    class AddInhabitants implements Command{}
    class RemoveInhabitants implements Command{}
    class AddWorkers implements Command{}
    class RemoveWorkers implements Command{}
    class GameController{
        - model : GameManager
        - view : View
        - commands : BagOfCommands
    }
    class BagOfCommands{
        - commands : Queue<Command>
        + executeFirst()
        + executeAll()
    }
}

ResourceType -->ResourceDecorator::Type
BuildingType -->BuildingDecorator::Type
Map --> GameManager::Map
Size --> BuildingDecorator::size
Size --> Map::size
People --> GameManager::worldInhabitants
People --> BuildingDecorator::inhabitants
People --> BuildingDecorator::workers
BuildingDecorator --> GameManager::buildings
ResourceManager --> GameManager::resources
MapTileStatus --> Map::tiles
ResourceDecorator --> ResourceManager::resources
BagOfCommands --> GameController::commands
GameManager --> GameController::model
@enduml
